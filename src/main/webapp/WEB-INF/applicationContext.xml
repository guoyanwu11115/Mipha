<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-4.0.xsd
			http://www.springframework.org/schema/util
			http://www.springframework.org/schema/util/spring-util-4.0.xsd
			">

	<context:component-scan base-package="com.miphalink" />
	<!-- 配置属性文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
               <value>classpath:/jdbc.properties</value>
                <!--要是有多个配置文件，只需在这里继续添加即可 -->
            </list>
        </property>
    </bean>
	<!-- 数据源  spring-jdbc.jar-->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${mipha.jdbc.url}" />
		<property name="username" value="${mipha.jdbc.username}" />
		<property name="password" value="${mipha.jdbc.password}" />
	</bean>
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource"/>
		</property>
	</bean>
	<!-- 配置transaction事务管理 spring-jdbc.jar-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>
	<!-- 开启transaction事务注解 mybatis-spring.jar-->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="mapperLocations" value="classpath*:com/miphalink/unity/mapper/*.xml"></property>
	</bean>
	<!-- 扫描接口，为其生成接口代理实现类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.miphalink.unity.dao"></property>
	</bean>
	<!--&lt;!&ndash; 事务管理 &ndash;&gt;-->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="query*" read-only="true" />
            <tx:method name="*" rollback-for="Exception"/><!--默认回滚机制是RuntimeException-->
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="service" expression="execution(* com.miphalink.unity..*Service*.*(..))" /><!--声明所有包含Service的类的所有方法使用事务-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="service" />
    </aop:config>

</beans>
